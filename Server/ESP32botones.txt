#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>


const char* ssid = "INFINITUME7D8";
const char* password = "kasumikasumi";
const char* mqttServer = "k8da39e9.ala.us-east-1.emqxsl.com";
const int mqttPort = 8084;
const char* mqttUser = "server";
const char* mqttPassword = "password";
const int PIN_BOTON_INCREMENTAR = 4; // Cambia el número del pin según la conexión real
const int PIN_BOTON_DECREMENTAR = 5; // Cambia el número del pin según la conexión real


WiFiClient espClient;
PubSubClient client(espClient);

int valor = 0; // Este es el valor que incrementarás o decrementarás

void setup() {
  // Inicializa la conexión WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Conectando a WiFi...");
  }
  Serial.println("Conectado a la red WiFi");

  // Inicializa la conexión MQTT
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
  pinMode(PIN_BOTON_INCREMENTAR, INPUT);
  pinMode(PIN_BOTON_DECREMENTAR, INPUT);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Verificar si el botón de incrementar se ha presionado
  if (digitalRead(PIN_BOTON_INCREMENTAR) == LOW) {
    incrementarValor();
    delay(100); // Agrega un pequeño retraso para evitar múltiples incrementos si se mantiene presionado el botón
  }

  // Verificar si el botón de decrementar se ha presionado
  if (digitalRead(PIN_BOTON_DECREMENTAR) == LOW) {
    decrementarValor();
    delay(100); // Agrega un pequeño retraso para evitar múltiples decrementos si se mantiene presionado el botón
  }
}


void callback(char* topic, byte* payload, unsigned int length) {
  // Este es el manejador de mensajes MQTT de entrada, si es necesario
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Conectando al servidor MQTT...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Conectado al servidor MQTT");
      // Subscribirse a un tema si es necesario
    } else {
      Serial.print("Error de conexión, rc=");
      Serial.print(client.state());
      Serial.println(" Intentando de nuevo en 5 segundos");
      delay(5000);
    }
  }
}

void enviarValor(int valor) {
  // Crea un objeto JSON con el formato requerido
  DynamicJsonDocument doc(1024);
  doc["from"] = "ESP32";
  doc["to"] = "broadcast";
  doc["action"] = "UPDATE_COUNTER";
  doc["value"] = valor;

  // Convierte el objeto JSON en una cadena
  String jsonString;
  serializeJson(doc, jsonString);

  // Publica el mensaje JSON en el tema MQTT
  client.publish("monitores/web_BACANO", jsonString.c_str());
}

void incrementarValor() {
  valor++;
  enviarValor(valor);
}

void decrementarValor() {
  valor--;
  enviarValor(valor);
}

